// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-07-08 20:05:29
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// BlogUserDao is the data access object for table blog_user.
type BlogUserDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns BlogUserColumns // columns contains all the column names of Table for convenient usage.
}

// BlogUserColumns defines and stores column names for table blog_user.
type BlogUserColumns struct {
	Id        string // 主键id
	Username  string // 用户名
	Password  string // 用户密码
	Status    string // 用户状态（0：关闭、1：开启）
	Salt      string // 用户密码加盐
	CreatedAt string // 创建时间
	UpdatedAt string // 更新时间
	RoleType  string // 用户角色 0普通用户 1管理员
}

//  blogUserColumns holds the columns for table blog_user.
var blogUserColumns = BlogUserColumns{
	Id:        "id",
	Username:  "username",
	Password:  "password",
	Status:    "status",
	Salt:      "salt",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	RoleType:  "role_type",
}

// NewBlogUserDao creates and returns a new DAO object for table data access.
func NewBlogUserDao() *BlogUserDao {
	return &BlogUserDao{
		group:   "default",
		table:   "blog_user",
		columns: blogUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BlogUserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *BlogUserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *BlogUserDao) Columns() BlogUserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *BlogUserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BlogUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BlogUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
