// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-07-08 20:05:29
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// BlogWebsiteDao is the data access object for table blog_website.
type BlogWebsiteDao struct {
	table   string             // table is the underlying table name of the DAO.
	group   string             // group is the database configuration group name of current DAO.
	columns BlogWebsiteColumns // columns contains all the column names of Table for convenient usage.
}

// BlogWebsiteColumns defines and stores column names for table blog_website.
type BlogWebsiteColumns struct {
	Id        string // 网站id
	Name      string // 网站名称
	Logo      string // 网站LOGO
	Copyright string // 网站版权
}

//  blogWebsiteColumns holds the columns for table blog_website.
var blogWebsiteColumns = BlogWebsiteColumns{
	Id:        "id",
	Name:      "name",
	Logo:      "logo",
	Copyright: "copyright",
}

// NewBlogWebsiteDao creates and returns a new DAO object for table data access.
func NewBlogWebsiteDao() *BlogWebsiteDao {
	return &BlogWebsiteDao{
		group:   "default",
		table:   "blog_website",
		columns: blogWebsiteColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BlogWebsiteDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *BlogWebsiteDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *BlogWebsiteDao) Columns() BlogWebsiteColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *BlogWebsiteDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BlogWebsiteDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BlogWebsiteDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
